// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	GetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (*GetFeedsResponse, error)
	CreateFeeds(ctx context.Context, in *CreateFeedsRequest, opts ...grpc.CallOption) (*CreateFeedsResponse, error)
	CreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*CreateFeedResponse, error)
	GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
	UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedResponse, error)
	DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*DeleteFeedResponse, error)
	GetUserTwitterSources(ctx context.Context, in *GetUserTwitterSourcesRequest, opts ...grpc.CallOption) (*GetUserTwitterSourcesResponse, error)
	CreateUserTwitterSources(ctx context.Context, in *CreateUserTwitterSourcesRequest, opts ...grpc.CallOption) (*CreateUserTwitterSourcesResponse, error)
	CreateUserTwitterSource(ctx context.Context, in *CreateUserTwitterSourceRequest, opts ...grpc.CallOption) (*CreateUserTwitterSourceResponse, error)
	GetUserTwitterSource(ctx context.Context, in *GetUserTwitterSourceRequest, opts ...grpc.CallOption) (*GetUserTwitterSourceResponse, error)
	UpdateUserTwitterSource(ctx context.Context, in *UpdateUserTwitterSourceRequest, opts ...grpc.CallOption) (*UpdateUserTwitterSourceResponse, error)
	DeleteUserTwitterSource(ctx context.Context, in *DeleteUserTwitterSourceRequest, opts ...grpc.CallOption) (*DeleteUserTwitterSourceResponse, error)
	GetQueryTwitterSources(ctx context.Context, in *GetQueryTwitterSourcesRequest, opts ...grpc.CallOption) (*GetQueryTwitterSourcesResponse, error)
	CreateQueryTwitterSources(ctx context.Context, in *CreateQueryTwitterSourcesRequest, opts ...grpc.CallOption) (*CreateQueryTwitterSourcesResponse, error)
	CreateQueryTwitterSource(ctx context.Context, in *CreateQueryTwitterSourceRequest, opts ...grpc.CallOption) (*CreateQueryTwitterSourceResponse, error)
	GetQueryTwitterSource(ctx context.Context, in *GetQueryTwitterSourceRequest, opts ...grpc.CallOption) (*GetQueryTwitterSourceResponse, error)
	UpdateQueryTwitterSource(ctx context.Context, in *UpdateQueryTwitterSourceRequest, opts ...grpc.CallOption) (*UpdateQueryTwitterSourceResponse, error)
	DeleteQueryTwitterSource(ctx context.Context, in *DeleteQueryTwitterSourceRequest, opts ...grpc.CallOption) (*DeleteQueryTwitterSourceResponse, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) GetFeeds(ctx context.Context, in *GetFeedsRequest, opts ...grpc.CallOption) (*GetFeedsResponse, error) {
	out := new(GetFeedsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateFeeds(ctx context.Context, in *CreateFeedsRequest, opts ...grpc.CallOption) (*CreateFeedsResponse, error) {
	out := new(CreateFeedsResponse)
	err := c.cc.Invoke(ctx, "/api.Api/CreateFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*CreateFeedResponse, error) {
	out := new(CreateFeedResponse)
	err := c.cc.Invoke(ctx, "/api.Api/CreateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedResponse, error) {
	out := new(UpdateFeedResponse)
	err := c.cc.Invoke(ctx, "/api.Api/UpdateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteFeed(ctx context.Context, in *DeleteFeedRequest, opts ...grpc.CallOption) (*DeleteFeedResponse, error) {
	out := new(DeleteFeedResponse)
	err := c.cc.Invoke(ctx, "/api.Api/DeleteFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetUserTwitterSources(ctx context.Context, in *GetUserTwitterSourcesRequest, opts ...grpc.CallOption) (*GetUserTwitterSourcesResponse, error) {
	out := new(GetUserTwitterSourcesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetUserTwitterSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateUserTwitterSources(ctx context.Context, in *CreateUserTwitterSourcesRequest, opts ...grpc.CallOption) (*CreateUserTwitterSourcesResponse, error) {
	out := new(CreateUserTwitterSourcesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/CreateUserTwitterSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateUserTwitterSource(ctx context.Context, in *CreateUserTwitterSourceRequest, opts ...grpc.CallOption) (*CreateUserTwitterSourceResponse, error) {
	out := new(CreateUserTwitterSourceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/CreateUserTwitterSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetUserTwitterSource(ctx context.Context, in *GetUserTwitterSourceRequest, opts ...grpc.CallOption) (*GetUserTwitterSourceResponse, error) {
	out := new(GetUserTwitterSourceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetUserTwitterSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) UpdateUserTwitterSource(ctx context.Context, in *UpdateUserTwitterSourceRequest, opts ...grpc.CallOption) (*UpdateUserTwitterSourceResponse, error) {
	out := new(UpdateUserTwitterSourceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/UpdateUserTwitterSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteUserTwitterSource(ctx context.Context, in *DeleteUserTwitterSourceRequest, opts ...grpc.CallOption) (*DeleteUserTwitterSourceResponse, error) {
	out := new(DeleteUserTwitterSourceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/DeleteUserTwitterSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetQueryTwitterSources(ctx context.Context, in *GetQueryTwitterSourcesRequest, opts ...grpc.CallOption) (*GetQueryTwitterSourcesResponse, error) {
	out := new(GetQueryTwitterSourcesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetQueryTwitterSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateQueryTwitterSources(ctx context.Context, in *CreateQueryTwitterSourcesRequest, opts ...grpc.CallOption) (*CreateQueryTwitterSourcesResponse, error) {
	out := new(CreateQueryTwitterSourcesResponse)
	err := c.cc.Invoke(ctx, "/api.Api/CreateQueryTwitterSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateQueryTwitterSource(ctx context.Context, in *CreateQueryTwitterSourceRequest, opts ...grpc.CallOption) (*CreateQueryTwitterSourceResponse, error) {
	out := new(CreateQueryTwitterSourceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/CreateQueryTwitterSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetQueryTwitterSource(ctx context.Context, in *GetQueryTwitterSourceRequest, opts ...grpc.CallOption) (*GetQueryTwitterSourceResponse, error) {
	out := new(GetQueryTwitterSourceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/GetQueryTwitterSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) UpdateQueryTwitterSource(ctx context.Context, in *UpdateQueryTwitterSourceRequest, opts ...grpc.CallOption) (*UpdateQueryTwitterSourceResponse, error) {
	out := new(UpdateQueryTwitterSourceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/UpdateQueryTwitterSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteQueryTwitterSource(ctx context.Context, in *DeleteQueryTwitterSourceRequest, opts ...grpc.CallOption) (*DeleteQueryTwitterSourceResponse, error) {
	out := new(DeleteQueryTwitterSourceResponse)
	err := c.cc.Invoke(ctx, "/api.Api/DeleteQueryTwitterSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	GetFeeds(context.Context, *GetFeedsRequest) (*GetFeedsResponse, error)
	CreateFeeds(context.Context, *CreateFeedsRequest) (*CreateFeedsResponse, error)
	CreateFeed(context.Context, *CreateFeedRequest) (*CreateFeedResponse, error)
	GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error)
	UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedResponse, error)
	DeleteFeed(context.Context, *DeleteFeedRequest) (*DeleteFeedResponse, error)
	GetUserTwitterSources(context.Context, *GetUserTwitterSourcesRequest) (*GetUserTwitterSourcesResponse, error)
	CreateUserTwitterSources(context.Context, *CreateUserTwitterSourcesRequest) (*CreateUserTwitterSourcesResponse, error)
	CreateUserTwitterSource(context.Context, *CreateUserTwitterSourceRequest) (*CreateUserTwitterSourceResponse, error)
	GetUserTwitterSource(context.Context, *GetUserTwitterSourceRequest) (*GetUserTwitterSourceResponse, error)
	UpdateUserTwitterSource(context.Context, *UpdateUserTwitterSourceRequest) (*UpdateUserTwitterSourceResponse, error)
	DeleteUserTwitterSource(context.Context, *DeleteUserTwitterSourceRequest) (*DeleteUserTwitterSourceResponse, error)
	GetQueryTwitterSources(context.Context, *GetQueryTwitterSourcesRequest) (*GetQueryTwitterSourcesResponse, error)
	CreateQueryTwitterSources(context.Context, *CreateQueryTwitterSourcesRequest) (*CreateQueryTwitterSourcesResponse, error)
	CreateQueryTwitterSource(context.Context, *CreateQueryTwitterSourceRequest) (*CreateQueryTwitterSourceResponse, error)
	GetQueryTwitterSource(context.Context, *GetQueryTwitterSourceRequest) (*GetQueryTwitterSourceResponse, error)
	UpdateQueryTwitterSource(context.Context, *UpdateQueryTwitterSourceRequest) (*UpdateQueryTwitterSourceResponse, error)
	DeleteQueryTwitterSource(context.Context, *DeleteQueryTwitterSourceRequest) (*DeleteQueryTwitterSourceResponse, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) GetFeeds(context.Context, *GetFeedsRequest) (*GetFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeds not implemented")
}
func (UnimplementedApiServer) CreateFeeds(context.Context, *CreateFeedsRequest) (*CreateFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeeds not implemented")
}
func (UnimplementedApiServer) CreateFeed(context.Context, *CreateFeedRequest) (*CreateFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeed not implemented")
}
func (UnimplementedApiServer) GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedApiServer) UpdateFeed(context.Context, *UpdateFeedRequest) (*UpdateFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeed not implemented")
}
func (UnimplementedApiServer) DeleteFeed(context.Context, *DeleteFeedRequest) (*DeleteFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeed not implemented")
}
func (UnimplementedApiServer) GetUserTwitterSources(context.Context, *GetUserTwitterSourcesRequest) (*GetUserTwitterSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTwitterSources not implemented")
}
func (UnimplementedApiServer) CreateUserTwitterSources(context.Context, *CreateUserTwitterSourcesRequest) (*CreateUserTwitterSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserTwitterSources not implemented")
}
func (UnimplementedApiServer) CreateUserTwitterSource(context.Context, *CreateUserTwitterSourceRequest) (*CreateUserTwitterSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserTwitterSource not implemented")
}
func (UnimplementedApiServer) GetUserTwitterSource(context.Context, *GetUserTwitterSourceRequest) (*GetUserTwitterSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTwitterSource not implemented")
}
func (UnimplementedApiServer) UpdateUserTwitterSource(context.Context, *UpdateUserTwitterSourceRequest) (*UpdateUserTwitterSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTwitterSource not implemented")
}
func (UnimplementedApiServer) DeleteUserTwitterSource(context.Context, *DeleteUserTwitterSourceRequest) (*DeleteUserTwitterSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserTwitterSource not implemented")
}
func (UnimplementedApiServer) GetQueryTwitterSources(context.Context, *GetQueryTwitterSourcesRequest) (*GetQueryTwitterSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryTwitterSources not implemented")
}
func (UnimplementedApiServer) CreateQueryTwitterSources(context.Context, *CreateQueryTwitterSourcesRequest) (*CreateQueryTwitterSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueryTwitterSources not implemented")
}
func (UnimplementedApiServer) CreateQueryTwitterSource(context.Context, *CreateQueryTwitterSourceRequest) (*CreateQueryTwitterSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueryTwitterSource not implemented")
}
func (UnimplementedApiServer) GetQueryTwitterSource(context.Context, *GetQueryTwitterSourceRequest) (*GetQueryTwitterSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryTwitterSource not implemented")
}
func (UnimplementedApiServer) UpdateQueryTwitterSource(context.Context, *UpdateQueryTwitterSourceRequest) (*UpdateQueryTwitterSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQueryTwitterSource not implemented")
}
func (UnimplementedApiServer) DeleteQueryTwitterSource(context.Context, *DeleteQueryTwitterSourceRequest) (*DeleteQueryTwitterSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueryTwitterSource not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_GetFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetFeeds(ctx, req.(*GetFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/CreateFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateFeeds(ctx, req.(*CreateFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/CreateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateFeed(ctx, req.(*CreateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetFeed(ctx, req.(*GetFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_UpdateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).UpdateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/UpdateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).UpdateFeed(ctx, req.(*UpdateFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/DeleteFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteFeed(ctx, req.(*DeleteFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetUserTwitterSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTwitterSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetUserTwitterSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetUserTwitterSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetUserTwitterSources(ctx, req.(*GetUserTwitterSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateUserTwitterSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserTwitterSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateUserTwitterSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/CreateUserTwitterSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateUserTwitterSources(ctx, req.(*CreateUserTwitterSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateUserTwitterSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserTwitterSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateUserTwitterSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/CreateUserTwitterSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateUserTwitterSource(ctx, req.(*CreateUserTwitterSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetUserTwitterSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTwitterSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetUserTwitterSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetUserTwitterSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetUserTwitterSource(ctx, req.(*GetUserTwitterSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_UpdateUserTwitterSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTwitterSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).UpdateUserTwitterSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/UpdateUserTwitterSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).UpdateUserTwitterSource(ctx, req.(*UpdateUserTwitterSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteUserTwitterSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserTwitterSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteUserTwitterSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/DeleteUserTwitterSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteUserTwitterSource(ctx, req.(*DeleteUserTwitterSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetQueryTwitterSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryTwitterSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetQueryTwitterSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetQueryTwitterSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetQueryTwitterSources(ctx, req.(*GetQueryTwitterSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateQueryTwitterSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryTwitterSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateQueryTwitterSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/CreateQueryTwitterSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateQueryTwitterSources(ctx, req.(*CreateQueryTwitterSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateQueryTwitterSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryTwitterSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateQueryTwitterSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/CreateQueryTwitterSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateQueryTwitterSource(ctx, req.(*CreateQueryTwitterSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetQueryTwitterSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryTwitterSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetQueryTwitterSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/GetQueryTwitterSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetQueryTwitterSource(ctx, req.(*GetQueryTwitterSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_UpdateQueryTwitterSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQueryTwitterSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).UpdateQueryTwitterSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/UpdateQueryTwitterSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).UpdateQueryTwitterSource(ctx, req.(*UpdateQueryTwitterSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteQueryTwitterSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueryTwitterSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteQueryTwitterSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Api/DeleteQueryTwitterSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteQueryTwitterSource(ctx, req.(*DeleteQueryTwitterSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeeds",
			Handler:    _Api_GetFeeds_Handler,
		},
		{
			MethodName: "CreateFeeds",
			Handler:    _Api_CreateFeeds_Handler,
		},
		{
			MethodName: "CreateFeed",
			Handler:    _Api_CreateFeed_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _Api_GetFeed_Handler,
		},
		{
			MethodName: "UpdateFeed",
			Handler:    _Api_UpdateFeed_Handler,
		},
		{
			MethodName: "DeleteFeed",
			Handler:    _Api_DeleteFeed_Handler,
		},
		{
			MethodName: "GetUserTwitterSources",
			Handler:    _Api_GetUserTwitterSources_Handler,
		},
		{
			MethodName: "CreateUserTwitterSources",
			Handler:    _Api_CreateUserTwitterSources_Handler,
		},
		{
			MethodName: "CreateUserTwitterSource",
			Handler:    _Api_CreateUserTwitterSource_Handler,
		},
		{
			MethodName: "GetUserTwitterSource",
			Handler:    _Api_GetUserTwitterSource_Handler,
		},
		{
			MethodName: "UpdateUserTwitterSource",
			Handler:    _Api_UpdateUserTwitterSource_Handler,
		},
		{
			MethodName: "DeleteUserTwitterSource",
			Handler:    _Api_DeleteUserTwitterSource_Handler,
		},
		{
			MethodName: "GetQueryTwitterSources",
			Handler:    _Api_GetQueryTwitterSources_Handler,
		},
		{
			MethodName: "CreateQueryTwitterSources",
			Handler:    _Api_CreateQueryTwitterSources_Handler,
		},
		{
			MethodName: "CreateQueryTwitterSource",
			Handler:    _Api_CreateQueryTwitterSource_Handler,
		},
		{
			MethodName: "GetQueryTwitterSource",
			Handler:    _Api_GetQueryTwitterSource_Handler,
		},
		{
			MethodName: "UpdateQueryTwitterSource",
			Handler:    _Api_UpdateQueryTwitterSource_Handler,
		},
		{
			MethodName: "DeleteQueryTwitterSource",
			Handler:    _Api_DeleteQueryTwitterSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
